package net.protocl.file{	import net.protocl.MyByteArray;	import net.protocl.MessageBase;	import net.protocl.IMessage;	public class S_2_C_1V1_ROLE_INFO extends MessageBase implements IMessage	{		public var role_id:int = 0;	// 负数表示机器人		public var role_name:String = "";		public var force_value:int = 0;		public var profession:int = 0;		public var exp:int = 0;		public var rank:int = 0;		public var attrs:Vector.<S_2_C_1V1_ROLE_INFO_ATTRIBUTE> = new Vector.<S_2_C_1V1_ROLE_INFO_ATTRIBUTE>;		public var skills:Vector.<S_2_C_1V1_ROLE_INFO_SKILL> = new Vector.<S_2_C_1V1_ROLE_INFO_SKILL>;		public function S_2_C_1V1_ROLE_INFO()		{			super(ProtoclId.S_2_C_1V1_ROLE_INFO);		}		//打包函数		public function encode():MyByteArray		{			var bytes:MyByteArray = new MyByteArray();			encodeInt32(bytes,role_id);			encodeStringLength(bytes,role_name,32);			encodeInt32(bytes,force_value);			encodeByte(bytes,profession);			encodeInt32(bytes,exp);			encodeInt32(bytes,rank);			encodeRepeatMessage(bytes,attrs);			encodeRepeatMessage(bytes,skills);			return bytes;		}		//解包函数		public function decode(bytes:MyByteArray):void		{			role_id = decodeInt32(bytes);			role_name = decodeStringLength(bytes,32);			force_value = decodeInt32(bytes);			profession = decodeByte(bytes);			exp = decodeInt32(bytes);			rank = decodeInt32(bytes);			decodeRepeatMessage(bytes,S_2_C_1V1_ROLE_INFO_ATTRIBUTE,attrs);			decodeRepeatMessage(bytes,S_2_C_1V1_ROLE_INFO_SKILL,skills);		}		//打印函数		override public function getString(func,p:String="")		{			func(p + "{");			p += "	";			func(p + "role_id:" + role_id);			func(p + "role_name:" + role_name);			func(p + "force_value:" + force_value);			func(p + "profession:" + profession);			func(p + "exp:" + exp);			func(p + "rank:" + rank);			func(p + "[");			for(var i:int = 0; i < attrs.length; i++)			{				this.attrs[i].getString(func,p + "	");			}			func(p + "]");			func(p + "[");			for(var i:int = 0; i < skills.length; i++)			{				this.skills[i].getString(func,p + "	");			}			func(p + "]");			p = p.slice(1,p.length);			func(p + "}");		}	}}